#!/bin/bash
################################################################################
# Script Name: domains/reset.sh
# Description: Reset Nginx VHost file for a domain name
# Usage: opencli domains-reset <DOMAIN-NAME>
# Author: Stefan Pejcic
# Created: 04.12.2024
# Last Modified: 04.12.2024
# Company: openpanel.com
# Copyright (c) openpanel.com
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
################################################################################


# DB
source /usr/local/admin/scripts/db.sh


get_docker_context_for_user(){
    # GET CONTEXT NAME FOR DOCKER COMMANDS
    server_name=$(mysql --defaults-extra-file=$config_file -D "$mysql_database" -e "SELECT server FROM users WHERE username='$username';" -N)
    
    if [ -z "$server_name" ]; then
        server_name="default" # compatibility with older panel versions before clustering
        context_flag=""
        node_ip_address=""
    elif [ "$server_name" == "default" ]; then
        context_flag=""
        node_ip_address=""
    else
        context_flag="--context $server_name"
        # GET IPV4 FOR SSH COMMANDS
        context_info=$(docker context ls --format '{{.Name}} {{.DockerEndpoint}}' | grep "$server_name")
    
        if [ -n "$context_info" ]; then
            endpoint=$(echo "$context_info" | awk '{print $2}')
            if [[ "$endpoint" == ssh://* ]]; then
                node_ip_address=$(echo "$endpoint" | cut -d'@' -f2 | cut -d':' -f1)
            else
                echo "ERROR: valid IPv4 address for context $server_name not found!"
                echo "       User container is located on node $server_name and there is a docker context with the same name but it has no valid IPv4 in the endpoint."
                echo "       Make sure that the docker context named $server_name has valid IPv4 address in format: 'SERVER ssh://USERNAME@IPV4' and that you can establish ssh connection using those credentials."
                exit 1
            fi
        else
            echo "ERROR: docker context with name $server_name does not exist!"
            echo "       User container is located on node $server_name but there is no docker context with that name."
            echo "       Make sure that the docker context exists and is available via 'docker context ls' command."
            exit 1
        fi
        
    fi



    # context         - node name
    # context_flag    - docker context to use in docker commands
    # node_ip_address - ipv4 to use for ssh
    
}





# Function to fetch the owner username of a domain
get_docker_context_for_user() {
    local domain="$1"
    
    # Check if the config file exists
    if [ ! -f "$config_file" ]; then
        echo "Config file $config_file not found."
        exit 1
    fi
    
    # Query to fetch the user_id for the specified domain
    user_id_query="SELECT username FROM domains WHERE domain_name = '$domain'"
    
    # Execute the query and fetch the user_id
    username=$(mysql --defaults-extra-file="$config_file" -D "$mysql_database" -e "$user_id_query" -sN)

    if [ -z "$username" ]; then
        echo "Domain '$domain' not found in the database."
        exit 1
    else
        username_query="SELECT server FROM users WHERE username = '$username'"
        server_name=$(mysql --defaults-extra-file="$config_file" -D "$mysql_database" -e "$username_query" -sN)
        if [ -z "$server_name" ]; then
            server_name="default" # compatibility with older panel versions before clustering
            context_flag=""
            node_ip_address=""
        elif [ "$server_name" == "default" ]; then
            context_flag=""
            node_ip_address=""
        else
            context_flag="--context $server_name"
            # GET IPV4 FOR SSH COMMANDS
            context_info=$(docker context ls --format '{{.Name}} {{.DockerEndpoint}}' | grep "$server_name")
        
            if [ -n "$context_info" ]; then
                endpoint=$(echo "$context_info" | awk '{print $2}')
                if [[ "$endpoint" == ssh://* ]]; then
                    node_ip_address=$(echo "$endpoint" | cut -d'@' -f2 | cut -d':' -f1)
                else
                    echo "ERROR: valid IPv4 address for context $server_name not found!"
                    echo "       User container is located on node $server_name and there is a docker context with the same name but it has no valid IPv4 in the endpoint."
                    echo "       Make sure that the docker context named $server_name has valid IPv4 address in format: 'SERVER ssh://USERNAME@IPV4' and that you can establish ssh connection using those credentials."
                    exit 1
                fi
            else
                echo "ERROR: docker context with name $server_name does not exist!"
                echo "       User container is located on node $server_name but there is no docker context with that name."
                echo "       Make sure that the docker context exists and is available via 'docker context ls' command."
                exit 1
            fi    
        fi
    fi
}



get_server_ipv4() {
	# IP SERVERS
	SCRIPT_PATH="/usr/local/admin/core/scripts/ip_servers.sh"
 	echo "Checking IPv4 address for the account"
	if [ -f "$SCRIPT_PATH" ]; then
	    source "$SCRIPT_PATH"
	else
	    IP_SERVER_1=IP_SERVER_2=IP_SERVER_3="https://ip.openpanel.com"
	fi

        current_ip=$(curl --silent --max-time 2 -4 $IP_SERVER_1 || wget --timeout=2 -qO- $IP_SERVER_2 || curl --silent --max-time 2 -4 $IP_SERVER_3)
	# If site is not available, get the ipv4 from the hostname -I
	if [ -z "$current_ip" ]; then
	    current_ip=$(ip addr|grep 'inet '|grep global|head -n1|awk '{print $2}'|cut -f1 -d/)
	fi
}


clear_cache_for_user() {
	echo "Purging cached list of domains for the account"
	rm /etc/openpanel/openpanel/core/users/${user}/data.json >/dev/null 2>&1
}




make_folder() {
	echo "Creating document root directory /home/$user/$domain_name"
	mkdir -p /home/$user/$domain_name
	docker exec $user bash -c "chown $user:33 /home/$user/$domain_name"
	chmod -R g+w /home/$user/$domain_name
}







create_domain_file() {
	if [ -f /etc/nginx/modsec/main.conf ]; then
	        conf_template="/etc/openpanel/nginx/vhosts/domain.conf_with_modsec"
     	    echo "Creating vhosts proxy file for Nginx with ModSecurity on host server"
	else
	        conf_template="/etc/openpanel/nginx/vhosts/domain.conf"
     	    echo "Creating vhosts proxy file for Nginx on host server"
	fi
	
	cp $conf_template /etc/nginx/sites-available/${domain_name}.conf
 
	mkdir -p /etc/openpanel/openpanel/core/users/${user}/domains/
	echo > /etc/openpanel/openpanel/core/users/${user}/domains/${domain_name}-block_ips.conf

	# VARNISH
 	# added in 0.2.6
	if docker exec "$username" test -f /etc/default/varnish; then
	    echo "Detected Varnish for user, setting Nginx to proxy requests to Varnish in user container."
	else
	    echo "Setting Nginx to proxy requests to $ws user container."
	fi
		sed -i \
		    -e "s|<DOMAIN_NAME>|$domain_name|g" \
		    -e "s|<USERNAME>|$username|g" \
		    -e "s|<IP>|$username|g" \
		    -e "s|<LISTEN_IP>|$current_ip|g" \
		    /etc/nginx/sites-available/${domain_name}.conf

	check_and_add_to_enabled() {
		# https://github.com/stefanpejcic/OpenPanel/issues/283
		mkdir -p /etc/nginx/sites-enabled/
    rm /etc/nginx/sites-enabled/${domain_name}.conf
		ln -s /etc/nginx/sites-available/${domain_name}.conf /etc/nginx/sites-enabled/
     		docker exec nginx sh -c "nginx -t && nginx -s reload"  >/dev/null 2>&1
	}

 	# Check if the 'nginx' container is running
	if [ $(docker ps -q -f name=nginx) ]; then
 	    echo "Webserver is running, validating new domain configuration"
		check_and_add_to_enabled
	else
	    echo "Webserver is not running, starting now"
            cd /root && docker compose up -d nginx  >/dev/null 2>&1
	    check_and_add_to_enabled
	fi


    
}



get_webserver_for_user(){
	    log "Checking webserver configuration"
	    output=$(opencli webserver-get_webserver_for_user $user)
	    if [[ $output == *nginx* ]]; then
	        ws="nginx"
	 	check_and_create_default_file
	    elif [[ $output == *apache* ]]; then
	        ws="apache2"
	    else
	        ws="unknown"
	    fi
}


# Check for the domain argument
if [ $# -ne 1 ]; then
    echo "Usage: $0 <domain_name>"
    exit 1
fi

# Get the domain name from the command line argument
domain_name="$1"

get_docker_context_for_user "$domain_name"           # get node and ip
get_server_ipv4                              # get outgoing ip
make_folder
get_webserver_for_user
create_domain_file
clear_cache_for_user


