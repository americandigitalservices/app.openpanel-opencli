#!/bin/bash

# Define the path to the configuration file
CONFIG_FILE="/etc/openpanel/openpanel/config/openpanel.conf"

# Check if the configuration file exists
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Configuration file not found: $CONFIG_FILE"
  exit 1
fi

# Extract nameserver values from the configuration file
NS1=$(grep '^ns1=' "$CONFIG_FILE" | cut -d'=' -f2)
NS2=$(grep '^ns2=' "$CONFIG_FILE" | cut -d'=' -f2)
NS3=$(grep '^ns3=' "$CONFIG_FILE" | cut -d'=' -f2)
NS4=$(grep '^ns4=' "$CONFIG_FILE" | cut -d'=' -f2)

# Check if at least ns1 and ns2 are set
if [ -z "$NS1" ] || [ -z "$NS2" ]; then
  echo "ns1 and ns2 must be set in the configuration file."
  exit 1
fi

# Collect nameservers to be used
NAMESERVERS=("$NS1" "$NS2")
[ -n "$NS3" ] && NAMESERVERS+=("$NS3")
[ -n "$NS4" ] && NAMESERVERS+=("$NS4")

ZONE_DIR="/etc/bind"

# Function to update nameservers in a zone file
update_zone_file() {
  local zone_file="$1"
  local tmp_file=$(mktemp)

  # Remove existing NS records and create new content
  grep -v '^[^;].*IN[[:space:]]*NS[[:space:]]*' "$zone_file" > "$tmp_file"

  # Add new NS records at the top
  for ns in "${NAMESERVERS[@]}"; do
    echo "@ IN NS $ns." >> "$tmp_file"
  done

  # Prepend new NS records and restore original file structure
  cat "$tmp_file" > "$zone_file"
  rm "$tmp_file"
}

# Loop through all zone files in the zone directory
for zone_file in "$ZONE_DIR"/*.zone; do
  if [ -f "$zone_file" ]; then
    update_zone_file "$zone_file"
  fi
done

    # Reload BIND service
    docker exec openpanel_dns rndc reconfig >/dev/null 2>&1
    cd /root && docker compose up -d bind9  >/dev/null 2>&1
    
echo "Nameservers have been updated and BIND9 zones reloaded."

exit 0
